const fs = require("fs");
const pdfParse = require("pdf-parse");

// ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF
const buffer = fs.readFileSync("./Sl2.pdf");

pdfParse(buffer).then((data) => {
  const rawText = data.text;
  const lines = rawText.split("\n");

  const transcript = [];

  // ‡∏õ‡∏£‡∏±‡∏ö regex ‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
  const regex =
    /^(\d{8})\s*([A-Za-z0-9\s\-',:()&\/]+?)\s*([A-D][+]?|F|W|U|N)\s*\(?(\d)?\)?$/;

  for (const line of lines) {
    const cleaned = line.replace(/[^\x00-\x7F]/g, "").trim(); // üí° ‡∏•‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÄ‡∏ä‡πà‡∏ô ‡∏∫)

    const match = cleaned.match(regex);

    if (match) {
      const courseId = match[1];
      const nameEN = match[2].trim();
      const grade = match[3].trim();
      const credit = parseInt(match[4] || 3); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏∏ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default = 3

      transcript.push({
        courseId,
        nameEN,
        grade,
        credits: credit,
      });
    } else {
      console.log("‚ùå ‡πÑ‡∏°‡πà match:", line); // üí° ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏î‡∏¥‡∏ö (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà cleaned) ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug ‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    }
  }

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
  console.log("\n‚úÖ ‡∏ß‡∏¥‡∏ä‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:");
  console.table(transcript);

  fs.writeFileSync("transcript-data2.json", JSON.stringify(transcript, null, 2));
  console.log("\nüìÅ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transcript-data.json ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
});
